"""``snakemake`` file that runs the AOC alignment step.
Written by Alexander G Lucaci.
"""

import itertools
import os
import sys
import csv
import json
from pathlib import Path
from snakemake.utils import min_version
#min_version("6.3")

#----------------------------------------------------------------------------
# Configuration
#----------------------------------------------------------------------------
configfile: 'config.yml'

print("# Loaded config yaml file")

with open("cluster.json", "r") as in_c:
  cluster = json.load(in_c)
#end with
in_c.close()

print("# Loaded cluster json file")

Nucleotide_file = config["Nucleotide"]
Protein_file = config["Protein"]
Label = config["Label"]

print("# Using nucleotide data from:", Nucleotide_file)
print("# Using protein data from:", Protein_file)
print("# Using the analysis label:", Label)

#HumanSeq = config["HumanSeq"]

# Batch files
PREMSA = config["PREMSA"]
POSTMSA = config["POSTMSA"]

# Set output directory
BASEDIR = os.getcwd()

print("# We are operating out of base directory:", BASEDIR)
OUTDIR = os.path.join(BASEDIR, "results", Label)
OUTDIR_RESULTS = os.path.join(BASEDIR, "results")

print("# We will create and store results in:", OUTDIR)

# Create output dir.
os.makedirs(OUTDIR_RESULTS, exist_ok = True)
print("# Directory '% s' created" % OUTDIR_RESULTS)

os.makedirs(OUTDIR, exist_ok = True)
print("# Directory '% s' created" % OUTDIR)

#Path(OUTDIR_RESULTS).mkdir(parents=True, exist_ok=True)
#Path(OUTDIR).mkdir(parents=True, exist_ok=True)

PPN = cluster["__default__"]["ppn"]

#PPN_MSA = int(PPN) - 7

# Hard-coded HyPhy settings
HYPHY = config["HYPHY"]
HYPHYMPI = config["HYPHYMPI"]
RES = config["RES"]

CODON_OUTPUT = os.path.join(OUTDIR, Label)

#----------------------------------------------------------------------------
# Helper functions
#----------------------------------------------------------------------------


#----------------------------------------------------------------------------
# Rule all
#----------------------------------------------------------------------------
rule all:
    input:
        CODON_OUTPUT,
        os.path.join(OUTDIR, Label + "_protein.fas"),
        os.path.join(OUTDIR, Label + "_nuc.fas"),
        os.path.join(OUTDIR, Label + "_protein.aln"),
        os.path.join(OUTDIR, Label + "_codons.fasta"),
        os.path.join(OUTDIR, Label + "_codons_duplicates.json"),
        os.path.join(OUTDIR, Label + "_codons.SA.fasta.dst"),
        os.path.join(OUTDIR, Label + "_codons.SA.fasta"),
        os.path.join(OUTDIR, Label + "_codons.SA.fasta.treefile"),
        os.path.join(OUTDIR, Label + "_codons.SA.fasta.cluster.json"),
        os.path.join(OUTDIR, Label + "_codons.SA.fasta.cluster.fasta"),
        os.path.join(OUTDIR, Label + "_codons.SA.fasta.cluster.fasta.GARD.json"),
        os.path.join(OUTDIR, Label + ".1.codon.fas")
#end rule all

print("# Moving on to processing rules")
#----------------------------------------------------------------------------
# Rules
#----------------------------------------------------------------------------
rule get_codons:
    output:
        codons = CODON_OUTPUT
    params:
        Nuc = Nucleotide_file,
        Prot = Protein_file,
        Out = CODON_OUTPUT
    script:
        "scripts/codons.py"
#end rule

rule pre_msa:
    input: 
        codons = rules.get_codons.output.codons
    output: 
        protein_fas = os.path.join(OUTDIR, Label + "_protein.fas"),
        nucleotide_fas = os.path.join(OUTDIR, Label + "_nuc.fas")
    shell: 
        #"mpirun -np {PPN} HYPHYMPI {PREMSA} --input {input.codons}"
        #"mpirun -np {PPN} {HYPHYMPI} LIBPATH={RES} {PREMSA} --input {input.codons} --reference {HumanSeq}"
        "mpirun -np {PPN} {HYPHYMPI} LIBPATH={RES} {PREMSA} --input {input.codons}"
#end rule 

rule mafft:
    input:
        protein = rules.pre_msa.output.protein_fas
    output:
        protein_aln = os.path.join(OUTDIR, Label + "_protein.aln")
    shell:
        "mafft --auto {input.protein} > {output.protein_aln}"
#end rule

rule post_msa:
    input: 
        protein_aln = rules.mafft.output.protein_aln,
        nucleotide_seqs = rules.pre_msa.output.nucleotide_fas  
    output: 
        codons_fas = os.path.join(OUTDIR, Label + "_codons.fasta"),
        duplicates_json = os.path.join(OUTDIR, Label + "_codons_duplicates.json")
    shell: 
        #"mpirun -np {PPN} HYPHYMPI {POSTMSA} --protein-msa {input.protein_aln} --nucleotide-sequences {input.nucleotide_seqs} --output {output.codons_fas} --duplicates {output.duplicates_json}"
        "mpirun -np {PPN} {HYPHYMPI} LIBPATH={RES} {POSTMSA} --protein-msa {input.protein_aln} --nucleotide-sequences {input.nucleotide_seqs} --output {output.codons_fas} --duplicates {output.duplicates_json}"
#end rule 

rule strike_ambigs:
   input:
       in_msa = rules.post_msa.output.codons_fas
   output:
       out_strike_ambigs = os.path.join(OUTDIR, Label + "_codons.SA.fasta")  
   shell:
       #"hyphy scripts/strike-ambigs.bf --alignment {input.in_msa} --output {output.out_strike_ambigs}"
       "{HYPHY} LIBPATH={RES} scripts/strike-ambigs.bf --alignment {input.in_msa} --output {output.out_strike_ambigs}"
#end rule 
#----------------------------------------------------------------------------
# AlignmentProfiler
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# IQ-TREE for ML tree inference
#----------------------------------------------------------------------------
rule iqtree: # Unrooted
    input:
        codons_fas = rules.strike_ambigs.output.out_strike_ambigs
    output:
        tree = os.path.join(OUTDIR, Label + "_codons.SA.fasta.treefile")  
    conda: 'environment.yml'
    shell:
        "iqtree -s {input.codons_fas} -T AUTO"
#end rule iqtree


#----------------------------------------------------------------------------
# TN93, on codon alignment, can be modified for distance calcs on protein aln
#----------------------------------------------------------------------------
rule tn93:
    input:
       input = rules.strike_ambigs.output.out_strike_ambigs
    output:
       output = os.path.join(OUTDIR, Label + "_codons.SA.fasta.dst")
    shell:
       "tn93 -t 1 -o {output.output} {input.input}"
#end rule

#----------------------------------------------------------------------------
# Downsample for GARD
#----------------------------------------------------------------------------
rule tn93_cluster:
    input:
        input = rules.strike_ambigs.output.out_strike_ambigs
    output:
        output = os.path.join(OUTDIR, Label + "_codons.SA.fasta.cluster.json")
    shell:
        "tn93-cluster -f -o {output.output} -t 0.1 {input.input}" 
#end rule

rule cluster_to_fasta:
   input: 
       input = rules.tn93_cluster.output.output
   output:
       output = os.path.join(OUTDIR, Label + "_codons.SA.fasta.cluster.fasta")
   shell:
       "python scripts/cluster_to_fasta.py -i {input.input} -o {output.output}"
#end rule 

#----------------------------------------------------------------------------
# Recombination detection
#----------------------------------------------------------------------------

rule recombination:
    input: 
        input = rules.cluster_to_fasta.output.output 
    output: 
        output = os.path.join(OUTDIR, Label + "_codons.SA.fasta.cluster.fasta.GARD.json")
    shell: 
        "mpirun -np {PPN} {HYPHYMPI} LIBPATH={RES} GARD --alignment {input.input} --rv GDD --output {output.output}"
#end rule

#----------------------------------------------------------------------------
# Split out GARD partitions
#----------------------------------------------------------------------------

rule gard_parse:
    params:
        genelabel = Label
    output:
        output = os.path.join(OUTDIR, Label + ".1.codon.fas")
    notebook:
        "notebooks/GARD_parse.ipynb"
#end rule

#----------------------------------------------------------------------------
# End of file
#----------------------------------------------------------------------------
